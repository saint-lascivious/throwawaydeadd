#!/usr/bin/env bash

# throwawaydeadd
# saint-lascivious (Hayden Pearce) Â©2023

# GNU General Public License Version 3

script_name="$(basename "$0")"
service_name="${script_name%.*}"
script_dir="$(pwd)"

config_file="${script_dir}/${service_name}.conf"
if [ -f "$config_file" ] && [ -r "$config_file" ]; then
    # shellcheck source=/dev/null
    . "$config_file"
fi

is_master="${IS_MASTER:-false}"

master_is_backup_active="${MASTER_IS_BACKUP_ACTIVE:-none}"
master_is_backup_inactive="${MASTER_IS_BACKUP_INACTIVE:-start}"
master_is_backup_failed="${MASTER_IS_BACKUP_FAILED:-restart}"
master_is_backup_disabled="${MASTER_IS_BACKUP_DISABLED:-enable}"
master_is_backup_masked="${MASTER_IS_BACKUP_MASKED:-none}"

backup_is_backup_active="${BACKUP_IS_BACKUP_ACTIVE:-none}"
backup_is_backup_inactive="${BACKUP_IS_BACKUP_INACTIVE:-start}"
backup_is_backup_failed="${BACKUP_IS_BACKUP_FAILED:-restart}"
backup_is_backup_disabled="${BACKUP_IS_BACKUP_DISABLED:-enable}"
backup_is_backup_masked="${BACKUP_IS_BACKUP_MASKED:-none}"

master_is_master_active="${MASTER_IS_MASTER_ACTIVE:-none}"
master_is_master_inactive="${MASTER_IS_MASTER_INACTIVE:-start}"
master_is_master_failed="${MASTER_IS_MASTER_FAILED:-restart}"
master_is_master_disabled="${MASTER_IS_MASTER_DISABLED:-enable}"
master_is_master_masked="${MASTER_IS_MASTER_MASKED:-none}"

backup_is_master_active="${BACKUP_IS_MASTER_ACTIVE:-none}"
backup_is_master_inactive="${BACKUP_IS_MASTER_INACTIVE:-start}"
backup_is_master_failed="${BACKUP_IS_MASTER_FAILED:-restart}"
backup_is_master_disabled="${BACKUP_IS_MASTER_DISABLED:-enable}"
backup_is_master_masked="${BACKUP_IS_MASTER_MASKED:-none}"

max_state_age="${MAX_STATE_AGE:-4}"
state_dir="${STATE_DIR:-/var/log}"

master_flag_file="${script_dir}/.is_master_server"
vrrp_function="${script_name##*.}"
lock_file="${state_dir}/${service_name}-${vrrp_function}.lock"
state_file="${state_dir}/${service_name}.state"

action_wrapper() {
    action_string="$1"
    case $action_string in
        ""|"none")
            exit 0
        ;;
        "restart"|"start"|"stop"|"enable"|"disable"|"mask"|"unmask"|"reenable"|"reload"|"reload-or-restart"|"reset-failed"|"try-restart"|"try-reload-or-restart")
            if systemctl "${action_string}" "${service_name}" > /dev/null; then
                exit 0
            else
                exit 1
            fi
        ;;
        "reboot"|"poweroff"|"halt"|"daemon-reexec"|"daemon-reload"|"suspend"|"hibernate"|"suspend-then-hibernate"|"hybrid-sleep")
            if systemctl "${action_string}" > /dev/null; then
                exit 0
            else
                exit 1
            fi
        ;;
        *)
            exit 1
        ;;
    esac
}

exec 9>"$lock_file"
if flock -n 9; then
    if command -v systemctl > /dev/null; then
        if systemctl is-enabled "${service_name}" > /dev/null; then
            service_state="$(systemctl is-active "${service_name}")"
        else
            service_state="$(systemctl is-enabled "${service_name}")"
        fi
    else
        service_state="unknown"
    fi
    case $vrrp_function in
        "check"|"CHECK")
            current_time="$(date +%s)"
            state_last_modified="$(date -r "${state_file}" +%s)"
            state_age="$(("${current_time}" - "${state_last_modified}"))"
            if [ -f "${state_file}" ] && [ "${state_age}" -le "${max_state_age}" ]; then
                saved_state="$(cat "${state_file}")"
                if [ "${saved_state}" = "active" ]; then
                    exit 0
                else
                    exit 1
                fi
            else
                exec 8>"$state_file"
                if flock -n 8; then
                    echo "${service_state}" > "${state_file}"
                    if [ "${service_state}" = "active" ]; then
                        exit 0
                    else
                        exit 1
                    fi
                fi
            fi
        ;;
        "notify"|"NOTIFY")
            vrrp_state="$3"
            if [ -f "$master_flag_file" ]; then
                is_master="true"
            fi
            case $vrrp_state in
                "backup"|"BACKUP")
                    if [ "$is_master" = "true" ]; then
                        case $service_state in
                            "active")
                                action_wrapper "${master_is_backup_active}"
                            ;;
                            "inactive")
                                action_wrapper "${master_is_backup_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${master_is_backup_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${master_is_backup_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${master_is_backup_masked}"
                            ;;
                        esac
                    else
                        case $service_state in
                            "active")
                                action_wrapper "${backup_is_backup_active}"
                            ;;
                            "inactive")
                                action_wrapper "${backup_is_backup_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${backup_is_backup_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${backup_is_backup_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${backup_is_backup_masked}"
                            ;;
                        esac
                    fi
                ;;
                "master"|"MASTER")
                    if [ "$is_master" = "true" ]; then
                        case $service_state in
                            "active")
                                action_wrapper "${master_is_master_active}"
                            ;;
                            "inactive")
                                action_wrapper "${master_is_master_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${master_is_master_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${master_is_master_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${master_is_master_masked}"
                            ;;
                        esac
                    else
                        case $service_state in
                            "active")
                                action_wrapper "${backup_is_master_active}"
                            ;;
                            "inactive")
                                action_wrapper "${backup_is_master_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${backup_is_master_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${backup_is_master_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${backup_is_master_masked}"
                            ;;
                        esac
                    fi
                ;;
            esac
        ;;
    esac
fi

#!/usr/bin/env bash

# throwawaydeadd

# Author: saint-lascivious (Hayden Pearce) Â©2023
# License: GNU General Public License Version 3

script_name="$(basename "$0")"
service_name="${script_name%.*}"
script_dir="$(pwd)"
config_file="${script_dir}/${service_name}.conf"
if [ -f "${config_file}" ] && [ -r "${config_file}" ]; then
    # shellcheck source=/dev/null
    . "${config_file}"
fi
is_master="${IS_MASTER:-false}"
log_dir="${LOG_DIR:-/var/log/throwawaydeadd}"
log_verbosity="${LOG_VERBOSITY:-0}"
master_is_backup_active="${MASTER_IS_BACKUP_ACTIVE:-none}"
master_is_backup_inactive="${MASTER_IS_BACKUP_INACTIVE:-start}"
master_is_backup_failed="${MASTER_IS_BACKUP_FAILED:-restart}"
master_is_backup_disabled="${MASTER_IS_BACKUP_DISABLED:-enable}"
master_is_backup_masked="${MASTER_IS_BACKUP_MASKED:-none}"
backup_is_backup_active="${BACKUP_IS_BACKUP_ACTIVE:-none}"
backup_is_backup_inactive="${BACKUP_IS_BACKUP_INACTIVE:-start}"
backup_is_backup_failed="${BACKUP_IS_BACKUP_FAILED:-restart}"
backup_is_backup_disabled="${BACKUP_IS_BACKUP_DISABLED:-enable}"
backup_is_backup_masked="${BACKUP_IS_BACKUP_MASKED:-none}"
master_is_master_active="${MASTER_IS_MASTER_ACTIVE:-none}"
master_is_master_inactive="${MASTER_IS_MASTER_INACTIVE:-start}"
master_is_master_failed="${MASTER_IS_MASTER_FAILED:-restart}"
master_is_master_disabled="${MASTER_IS_MASTER_DISABLED:-enable}"
master_is_master_masked="${MASTER_IS_MASTER_MASKED:-none}"
backup_is_master_active="${BACKUP_IS_MASTER_ACTIVE:-none}"
backup_is_master_inactive="${BACKUP_IS_MASTER_INACTIVE:-start}"
backup_is_master_failed="${BACKUP_IS_MASTER_FAILED:-restart}"
backup_is_master_disabled="${BACKUP_IS_MASTER_DISABLED:-enable}"
backup_is_master_masked="${BACKUP_IS_MASTER_MASKED:-none}"
max_state_age="${MAX_STATE_AGE:-4}"
state_dir="${STATE_DIR:-/var/log}"
pre_action_hook="${PRE_ACTION_HOOK:-pre_action}"
post_action_hook="${POST_ACTION_HOOK:-post_action}"
failed_action_hook="${FAILED_ACTION_HOOK:-failed_action}"
master_flag_file="${script_dir}/.is_master_server"
vrrp_function="${script_name##*.}"
lock_file="${state_dir}/${service_name}-${vrrp_function}.lock"
state_file="${state_dir}/${service_name}.state"

log_directory_creation() {
    local directory="$1"
    log_wrapper "creating directory ${directory}" 4
}

log_wrapper() {
    local message="$1"
    local verbosity="$2"
    if [ "${log_verbosity}" -ge "${verbosity}" ]; then
        if [ ! -d "${log_dir}" ]; then
            mkdir -p "${log_dir}" && log_directory_creation "${log_dir}"
        fi
        case "${verbosity}" in
            "1")
                log_type="ERROR: "
            ;;
            "2")
                log_type="WARNING: "
            ;;
            "3")
                log_type="INFO: "
            ;;
            "4")
                log_type="DEBUG: "
            ;;
        esac
        echo "[$(date +"%d-%m-%Y %H:%M:%S.%3N%:z %Z")] ${log_type}${message}" >> "${log_dir}/${service_name}.log"
    fi
}

get_state() {
    if ! command -v systemctl > /dev/null; then
        log_wrapper "systemctl command not found" 1
        exit 1
    fi
    local current_time
    current_time="$(date +%s 2>/dev/null)"
    local state_last_modified
    state_last_modified="$(date -r "${state_file}" 2>/dev/null +%s)"
    local state_age="$(("${current_time}" - "${state_last_modified}"))"
    if [ -f "${state_file}" ] && [ "${state_age}" -le "${max_state_age}" ]; then
        service_state="$(cat "${state_file}" 2>/dev/null)"
    else
        exec 8>"$state_file"
        if flock -n 8; then
            service_state="$(systemctl is-active "${service_name}" 2>/dev/null)"
            echo "${service_state}" > "${state_file}"
        else
            log_wrapper "could not get lock for ${state_file}" 4
        fi
    fi
}

hook_wrapper() {
    local hook_type="$1"
    local hook_dir="./hooks/${hook_type}"
    if [ -d "${hook_dir}" ]; then
        if [ -n "$(find "${hook_dir}" -maxdepth 1 -type f -executable)" ]; then
            log_wrapper "executing hook script(s) of type ${hook_type}" 3
            for hook_script in "${hook_dir}"/*; do
                if [ -x "${hook_script}" ]; then
                    local hook_shebang
                    hook_shebang="$(sed -nE '1s|^#!\s*.*/(env )?([^ ]+).*|\2|p' "${hook_dir}/${hook_script}")"
                    local interpreter
                    if [ -n "${hook_shebang}" ]; then
                        interpreter="$(which "${hook_shebang}")"
                    else
                        interpreter="$(which bash)"
                    fi
                    log_wrapper "executing ${hook_dir}/${hook_script} with ${interpreter}" 4
                    exec "${interpreter}" "${hook_script}"
                fi
            done
        fi
    fi
}

action_wrapper() {
    local action_string="$1"
    case "${action_string}" in
        ""|"none")
            log_wrapper "not performing any action" 4
            exit 0
        ;;
        "restart"|"start"|"stop"|"enable"|"disable"|"mask"|"unmask"|"reenable"|"reload"|"reload-or-restart"|"reset-failed"|"try-restart"|"try-reload-or-restart")
            hook_wrapper "${pre_action_hook}"
            if ! systemctl "${action_string}" "${service_name}" > /dev/null; then
                log_wrapper "command systemctl ${action_string} ${service_name} failed" 1
                hook_wrapper "${failed_action_hook}"
                exit 1
            fi
        ;;
        "reboot"|"poweroff"|"halt"|"daemon-reexec"|"daemon-reload"|"suspend"|"hibernate"|"suspend-then-hibernate"|"hybrid-sleep")
            hook_wrapper "${pre_action_hook}"
            if ! systemctl "${action_string}" > /dev/null; then
                log_wrapper "command systemctl ${action_string} failed" 1
                hook_wrapper "${failed_action_hook}"
                exit 1
            fi
        ;;
        *)
            log_wrapper "unrecognised action ${action_string}" 1
            exit 1
        ;;
    esac
    hook_wrapper "${post_action_hook}"
}

exec 9>"$lock_file"
if flock -n 9; then
    get_state
    case "${vrrp_function}" in
        "check"|"CHECK")
            if [ ! "${service_state}" = "active" ]; then
                log_wrapper "${service_name} is ${service_state}" 1
                exit 1
            fi
            log_wrapper "check script ran successfully" 4
        ;;
        "notify"|"NOTIFY")
            vrrp_state="$3"
            if [ -f "${master_flag_file}" ]; then
                is_master="true"
            fi
            case "${vrrp_state}" in
                "backup"|"BACKUP")
                    if [ "${is_master}" = "true" ]; then
                        log_wrapper "master in backup state" 2
                        case "${service_state}" in
                            "active")
                                action_wrapper "${master_is_backup_active}"
                            ;;
                            "inactive")
                                action_wrapper "${master_is_backup_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${master_is_backup_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${master_is_backup_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${master_is_backup_masked}"
                            ;;
                        esac
                    else
                        log_wrapper "backup in backup state" 3
                        case "${service_state}" in
                            "active")
                                action_wrapper "${backup_is_backup_active}"
                            ;;
                            "inactive")
                                action_wrapper "${backup_is_backup_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${backup_is_backup_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${backup_is_backup_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${backup_is_backup_masked}"
                            ;;
                        esac
                    fi
                ;;
                "master"|"MASTER")
                    if [ "${is_master}" = "true" ]; then
                        log_wrapper "master in master state" 3
                        case "${service_state}" in
                            "active")
                                action_wrapper "${master_is_master_active}"
                            ;;
                            "inactive")
                                action_wrapper "${master_is_master_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${master_is_master_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${master_is_master_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${master_is_master_masked}"
                            ;;
                        esac
                    else
                        log_wrapper "backup in master state" 2
                        case "${service_state}" in
                            "active")
                                action_wrapper "${backup_is_master_active}"
                            ;;
                            "inactive")
                                action_wrapper "${backup_is_master_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${backup_is_master_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${backup_is_master_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${backup_is_master_masked}"
                            ;;
                        esac
                    fi
                ;;
            esac
            log_wrapper "notify script ran successfully" 4
        ;;
    esac
    exit 0
else
    log_wrapper "could not get lock for ${lock_file}" 4
fi

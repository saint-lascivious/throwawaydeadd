#!/usr/bin/env bash

# throwawaydeadd
# saint-lascivious (Hayden Pearce) Â©2023

# GNU General Public License Version 3

master_flag_file="/etc/scripts/.is_master_server"  # MASTER server trigger file.
max_statge_age="4"  # Time in seconds before saved state is considered stale.
state_dir="/var/log"  # Directory in which *.lock and *.state files are kept.

script_name="$(basename "$0")"  # Stuffs for services, functions and states.
service_name="${script_name%.*}"
vrrp_function="${script_name##*.}"
lock_file="${state_dir}/${service_name}-${vrrp_function}.lock" # Instance lock.
current_time="$(date +%s)"  # Stuffs for saving service states.
state_file="${state_dir}/${service_name}.state"
state_last_modified="$(stat -c %Y "${state_file}")"
state_age="$(("${current_time}" - "${state_last_modified}"))"

is_master="false"  # SHOULD NOT edit, use trigger file described above.

log() {
    message="$1"
    log_level="$2"
    case "$log_level" in
        "INFO" | "WARNING")
            echo "${log_level}: $message"  >&1
        ;;
        "ERROR")
            echo "${log_level}: $message" >&2
        ;;
    esac
}

exec 9>"$lock_file"  # MUST obtain an exclusive lock
if flock -n 9; then
    if command -v systemctl > /dev/null 2>&1; then
        service_state="$(systemctl is-active "$service_name")"
    else
        log "command 'systemctl' is not available" ERROR
        exit 1
    fi
    case $vrrp_function in
        "check"|"CHECK")
            if [ -f "${state_file}" ] && [ "${state_age}" -le "${max_statge_age}" ]; then
                saved_state="$(cat "${state_file}")"  # Return a saved state
                if [ "${saved_state}" = "active" ]; then  # Prevent 'ping-pong'
                    log "{service_name} saved state is active" INFO
                    exit 0
                else
                    log "{service_name} saved state is not active" WARNING
                    exit 1
                fi
            else
                exec 8>"$state_file"  # MUST obtain an exclusive lock
                if flock -n 8; then
                    echo "${service_state}" > "${state_file}"  # Save state.
                    if [ "${service_state}" = "active" ]; then
                        log "{service_name} is active" INFO
                        exit 0
                    else
                        log "{service_name} is not active" WARNING
                        exit 1
                    fi
                else
                    log "failed to obtain a lock to write state" WARNING
                fi
            fi
        ;;
        "notify"|"NOTIFY")
            vrrp_state="$3"
            if [ -f "$master_flag_file" ]; then
                is_master="true"
            fi
            case $vrrp_state in
                "backup"|"BACKUP")
                    if [ "$is_master" = "true" ]; then
                        log "MASTER entered BACKUP state" WARNING
                        case $service_state in
                            "active")  # Uncomment to restart even if active
                                #systemctl restart "${service_name}"
                                exit 0
                            ;;
                            "inactive")  # Start the service if inactive.
                                systemctl start "${service_name}"
                                exit 0
                            ;;
                        esac
                    else  # Default logic is duplicated, do what you want.
                        log "BACKUP entered BACKUP state" INFO
                        case $service_state in
                            "active")  # Uncomment to restart even if active
                                #systemctl restart "${service_name}"
                                exit 0
                            ;;
                            "inactive")  # Start the service if inactive.
                                systemctl start "${service_name}"
                                exit 0
                            ;;
                        esac
                    fi
                ;;
                "master"|"MASTER")
                    if [ "$is_master" = "true" ]; then
                        log "MASTER entered MASTER state" INFO
                        case $service_state in
                            "active")  # Uncomment to restart even if active
                                #systemctl restart "${service_name}"
                                exit 0
                            ;;
                            "inactive")  # Start the service if inactive.
                                systemctl start "${service_name}"
                                exit 0
                            ;;
                        esac
                    else  # Default logic is duplicated, do what you want.
                        log "BACKUP entered MASTER state" WARNING
                        case $service_state in
                            "active")  # Uncomment to restart even if active
                                #systemctl restart "${service_name}"
                                exit 0
                            ;;
                            "inactive")  # Start the service if inactive.
                                systemctl start "${service_name}"
                                exit 0
                            ;;
                        esac
                    fi
                ;;
            esac
        ;;
    esac
else
    log "failed to obtain a lock" WARNING
fi

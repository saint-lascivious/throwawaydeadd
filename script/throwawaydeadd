#!/usr/bin/env bash

# throwawaydeadd

# Author: saint-lascivious (Hayden Pearce) Â©2023
# License: GNU General Public License Version 3

# Overview: A simple and highly flexible `keepalived` check and/or notify
#           script particularly useful for managing failover scenarios in a
#           high-availability environment.

# The basename and file extension will dictate the service to monitor
# and the function to perform respectively.
#
# The service name MUST be an exact match, and the extension MUST be one of
# check, CHECK, notify or NOTIFY.
#
# Example:
# ln -s /etc/throwawaydeadd/throwawaydeadd /etc/throwawaydeadd/pihole-FTL.check
# ln -s /etc/throwawaydeadd/throwawaydeadd /etc/throwawaydeadd/pihole-FTL.notify
#
# To indicate that they should function primarily as a MASTER server rather
# than a BACKUP server, MASTER server(s) SHOULD create a trigger file.
#
# Example:
# touch /etc/throwawaydeadd/.is_master_server

trap "exec 9>&-" EXIT               # Trap to close file descriptor on exit

vrrp_arguments=("$@")               # VRRP arguments
vrrp_type="${vrrp_arguments[0]}"    # VRRP type GROUP or INSTANCE
vrrp_name="${vrrp_arguments[1]}"    # VRRP name
vrrp_state="${vrrp_arguments[2]}"   # VRRP state MASTER, BACKUP or FAULT

script_name="$(basename "$0")"
service_name="${script_name%.*}"
script_dir="/etc/throwawaydeadd"
script_function="${script_name##*.}"
master_flag_file="${script_dir}/.is_master_server"
lock_file="${script_dir}/${service_name}-${script_function}.lock"
log_dir="/var/log/throwawaydeadd"

config_file="${script_dir}/${service_name}.conf"
if [[ -f "${config_file}" ]] && [[ -r "${config_file}" ]]; then
    # shellcheck source=/dev/null
    source "${config_file}"
fi
is_master="${IS_MASTER:-false}"
log_dir="${LOG_DIR:-/var/log/throwawaydeadd}"
log_verbosity="${LOG_VERBOSITY:-0}"
expected_service_state_master="${EXPECTED_SERVICE_STATE_MASTER:-active}"
expected_service_state_backup="${EXPECTED_SERVICE_STATE_BACKUP:-active}"
master_is_master_active="${MASTER_IS_MASTER_ACTIVE:-none}"
master_is_master_inactive="${MASTER_IS_MASTER_INACTIVE:-start}"
master_is_master_failed="${MASTER_IS_MASTER_FAILED:-restart}"
master_is_master_disabled="${MASTER_IS_MASTER_DISABLED:-enable}"
master_is_master_masked="${MASTER_IS_MASTER_MASKED:-none}"
backup_is_master_active="${BACKUP_IS_MASTER_ACTIVE:-none}"
backup_is_master_inactive="${BACKUP_IS_MASTER_INACTIVE:-start}"
backup_is_master_failed="${BACKUP_IS_MASTER_FAILED:-restart}"
backup_is_master_disabled="${BACKUP_IS_MASTER_DISABLED:-enable}"
backup_is_master_masked="${BACKUP_IS_MASTER_MASKED:-none}"
master_is_backup_active="${MASTER_IS_BACKUP_ACTIVE:-none}"
master_is_backup_inactive="${MASTER_IS_BACKUP_INACTIVE:-start}"
master_is_backup_failed="${MASTER_IS_BACKUP_FAILED:-restart}"
master_is_backup_disabled="${MASTER_IS_BACKUP_DISABLED:-enable}"
master_is_backup_masked="${MASTER_IS_BACKUP_MASKED:-none}"
backup_is_backup_active="${BACKUP_IS_BACKUP_ACTIVE:-none}"
backup_is_backup_inactive="${BACKUP_IS_BACKUP_INACTIVE:-start}"
backup_is_backup_failed="${BACKUP_IS_BACKUP_FAILED:-restart}"
backup_is_backup_disabled="${BACKUP_IS_BACKUP_DISABLED:-enable}"
backup_is_backup_masked="${BACKUP_IS_BACKUP_MASKED:-none}"

log_wrapper() {
    message="$1"
    verbosity="$2"
    if [[ "${log_verbosity}" -ge "${verbosity}" ]]; then
        timestamp="$(date --rfc-3339 seconds)"
        if [[ ! -d "${log_dir}" ]]; then
            mkdir -p "${log_dir}"
        fi
        case $verbosity in
            "1")
                log_category="ERROR"
            ;;
            "2")
                log_category="WARNING"
            ;;
            "3")
                log_category="INFO"
            ;;
            "4")
                log_category="DEBUG"
            ;;
        esac
        log_message="${timestamp} ${log_category}: ${message}"
        log_file="${log_dir}/${service_name}-${script_function}.log"
        echo "${log_message}" >> "${log_file}"
    fi
}

action_wrapper() {
    action_string="$1"
    case $action_string in
        "none")
            log_wrapper "no action performed" "4"
        ;;
        "restart"|"start"|"stop"|"enable"|"disable"|"mask"|"unmask"|"reenable"|"reload"|"reload-or-restart"|"reset-failed"|"try-restart"|"try-reload-or-restart")
            log_wrapper "performing service level action ${action_string}" "3"
            systemctl "${action_string}" "${service_name}"
        ;;
        "reboot"|"poweroff"|"halt"|"daemon-reexec"|"daemon-reload"|"suspend"|"hibernate"|"suspend-then-hibernate"|"hybrid-sleep")
            log_wrapper "performing host level action ${action_string}" "3"
            systemctl "${action_string}"
        ;;
        *)
            log_wrapper "unknown action ${action_string}" "1"
            exit 1
        ;;
    esac
}

exec 9>"${lock_file}"
if flock -n 9; then
    if [[ ! -d "${log_dir}" ]]; then
        mkdir -p "${log_dir}"
    fi
    if command -v systemctl; then
        service_state="$(systemctl is-active "${service_name}")"
    else
        log_wrapper "systemctl command not found" "1"
        exit 1
    fi
    if [[ -f "${master_flag_file}" ]]; then
        log_wrapper "this is a dedicated MASTER server" "4"
        is_master="true"
    fi
    case $script_function in
        "check"|"CHECK")
            log_wrapper "started check action" "4"
            if [[ "${is_master}" = "true" ]]; then
                expected_service_state="${expected_service_state_master}"
            else
                expected_service_state="${expected_service_state_backup}"
            fi
            if [[ "${service_state}" = "${expected_service_state}" ]]; then
                log_wrapper "expected service state ${service_state}" "3"
                exit 0
            else
                log_wrapper "unexpected service state ${service_state}" "1"
                exit 1
            fi
        ;;
        "notify"|"NOTIFY")
            log_wrapper "started notify action" "4"
            case $vrrp_state in
                "MASTER"|"master")
                    if [[ "${is_master}" = "true" ]]; then
                        log_wrapper "${vrrp_type} ${vrrp_name} now in ${vrrp_state} state" "3"
                        case $service_state in
                            "active")
                                action_wrapper "${master_is_master_active}"
                            ;;
                            "inactive")
                                action_wrapper "${master_is_master_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${master_is_master_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${master_is_master_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${master_is_master_masked}"
                            ;;
                        esac
                    else
                        log_wrapper "${vrrp_type} ${vrrp_name} now in ${vrrp_state} state" "2"
                        case $service_state in
                            "active")
                                action_wrapper "${backup_is_master_active}"
                            ;;
                            "inactive")
                                action_wrapper "${backup_is_master_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${backup_is_master_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${backup_is_master_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${backup_is_master_masked}"
                            ;;
                        esac
                    fi
                ;;
                "BACKUP"|"backup")
                    if [[ "${is_master}" = "true" ]]; then
                        log_wrapper "${vrrp_type} ${vrrp_name} now in ${vrrp_state} state" "2"
                        case $service_state in
                            "active")
                                action_wrapper "${master_is_backup_active}"
                            ;;
                            "inactive")
                                action_wrapper "${master_is_backup_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${master_is_backup_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${master_is_backup_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${master_is_backup_masked}"
                            ;;
                        esac
                    else
                        log_wrapper "${vrrp_type} ${vrrp_name} now in ${vrrp_state} state" "3"
                        case $service_state in
                            "active")
                                action_wrapper "${backup_is_backup_active}"
                            ;;
                            "inactive")
                                action_wrapper "${backup_is_backup_inactive}"
                            ;;
                            "failed")
                                action_wrapper "${backup_is_backup_failed}"
                            ;;
                            "disabled")
                                action_wrapper "${backup_is_backup_disabled}"
                            ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${backup_is_backup_masked}"
                            ;;
                        esac
                    fi
                ;;
            esac
            exit 0
        ;;
    esac
fi

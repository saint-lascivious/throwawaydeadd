#!/usr/bin/env bash

export PATH+=":/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

readonly script_dir="/etc/throwawaydeadd"

readonly vrrp_arguments=("$@")
readonly vrrp_type="${vrrp_arguments[0]}"
readonly vrrp_name="${vrrp_arguments[1]}"
readonly vrrp_state="${vrrp_arguments[2]}"

readonly major="0"
readonly minor=".9"
readonly micro=".2"
readonly version="${major}${minor}${micro}"

check_user() {
    if [[ ! $EUID -eq 0 ]];then
        if type sudo >/dev/null 2>&1; then
            exec sudo bash "$0" "$@"
            exit $?
        else
            echo "ERROR: run as root or install sudo"
            exit 1
        fi
    fi
}

case $vrrp_type in
    "-f"|"flush"|"--flush-locks")
        check_user "$@"
        for lock in "${script_dir}"/*-*.lock; do
            rm "${lock}"
        done
        exit 0
    ;;
    "-h"|"help"|"--help")
        echo -e "Usage: throwawaydeadd {OPTION|GNU LONG OPTION}\\n
Option         GNU Long Option     Description
 -f, flush      --flush-locks       Delete all throwawaydeadd .lock files.
 -h, help       --help              Display this help dialogue.
 -l, list       --list-services     List all services by name.
 -r, restart    --restart           Restart the keepalived service.
 -v, version    --version           Display throwawaydeadd version."
        exit 0
    ;;
    "-l"|"list"|"--list-services")
        if type systemctl awk grep >/dev/null 2>&1; then
            if ! systemctl list-units --type=service --no-pager --no-legend | \
            awk -F'.' '{print $1}' | grep -v '@'; then
                echo "ERROR: failed to list services"
                exit 1
            fi
        fi
        exit 0
    ;;
    "-r"|"restart"|"--restart")
        check_user "$@"
        if type systemctl >/dev/null 2>&1; then
            if ! systemctl restart keepalived.service >/dev/null 2>&1; then
                echo "ERROR: failed to restart keepalived.service"
                exit 1
            fi
        fi
        exit 0
    ;;
    "-v"|"version"|"--version")
        echo "throwawaydeadd v${version}"
        exit 0
    ;;
esac

trap "exec 9>&-" EXIT

readonly script_name
script_name="$(basename "$0" 2>/dev/null)"
readonly service_name="${script_name%.*}"
readonly script_function="${script_name##*.}"
readonly lock_file="${script_dir}/${service_name}-${script_function}.lock"

readonly config_file="${script_dir}/${service_name}.conf"
if [[ -f "${config_file}" ]] && [[ -r "${config_file}" ]]; then
    # shellcheck source=/dev/null
    source "${config_file}"
fi

log_wrapper() {
    local message="$1"
    local verbosity="$2"
    local log_dir="${LOG_DIR:-/var/log/throwawaydeadd}"
    local log_verbosity="${LOG_VERBOSITY:-0}"
    local date_format="${DATE_FORMAT:-rfc3339}"
    if [[ "${log_verbosity}" -ge "${verbosity}" ]]; then
        if type mkdir >/dev/null 2>&1; then
            mkdir -p "${log_dir}"
        else
            log_wrapper "mkdir command not found" "1"
            exit 1
        fi
        if type date >/dev/null 2>&1; then
            case $date_format in
                "rfc3339")            date_string="--rfc-3339=seconds" ;;
                "iso8601")            date_string="--iso-8601=seconds" ;;
                "rfc5322"|"rfcemail") date_string="--rfc-email" ;;
                "locale")             date_string="+%c" ;;
                "epoch")              date_string="+%s" ;;
                *)                    date_string="--rfc-3339=seconds" ;;
            esac
            local timestamp
            timestamp="$(date ${date_string} 2>/dev/null) - "
        fi
        declare -A log_categories=(
            [1]="ERROR"
            [2]="WARNING"
            [3]="INFO"
            [4]="DEBUG"
        )
        echo "${timestamp}${log_categories[$verbosity]}: ${message}" \
            >> "${log_dir}/${service_name}-${script_function}.log"
    fi
}

action_wrapper() {
    local action_string="$1"
    case $action_string in
        "none")
            log_wrapper "no action performed for action 'none'" "4"
        ;;
        "restart"|"start"|"stop"|"enable"|"disable"|"mask"|"unmask"|\
        "reenable"|"reload"|"reload-or-restart"|"reset-failed"|"try-restart"|\
        "try-reload-or-restart")
            log_wrapper "performing service level action ${action_string}" "3"
            if ! systemctl "${action_string}" "${service_name}" \
            >/dev/null 2>&1; then
                log_wrapper "service action ${action_string} failed" "2"
            fi
        ;;
        "reboot"|"poweroff"|"halt"|"daemon-reexec"|"daemon-reload"|"suspend"|\
        "hibernate"|"suspend-then-hibernate"|"hybrid-sleep")
            log_wrapper "performing host level action ${action_string}" "3"
            if ! systemctl "${action_string}" >/dev/null 2>&1; then
                log_wrapper "host action ${action_string} failed" "2"
            fi
        ;;
        *)
            log_wrapper "unknown action ${action_string}" "1"
            exit 1
        ;;
    esac
}

exec 9>"${lock_file}"

if flock -n 9; then
    if type systemctl >/dev/null 2>&1; then
        if systemctl is-enabled "${service_name}" 2>/dev/null | grep -q \
        "enabled"; then
            service_state="$(systemctl is-active "${service_name}" \
            2>/dev/null)"
        else
            if ! systemctl list-units "${service_name}.service" \
            >/dev/null 2>&1; then
                log_wrapper "${service_name}.service not found" "1"
                exit 1
            else
                service_state="$(systemctl is-enabled "${service_name}" \
                2>/dev/null)"
            fi
        fi
    else
        log_wrapper "systemctl command not found" "1"
        exit 1
    fi
    readonly master_flag_file="${script_dir}/.is_master_server"
    if [[ -f "${master_flag_file}" ]]; then
        is_master="true"
    else
        is_master="${IS_MASTER:-false}"
    fi
    case $script_function in
        "check"|"CHECK")
            if [[ "${is_master}" = "true" ]]; then
                expected_state="${EXPECTED_SERVICE_STATE_MASTER:-active}"
            else
                expected_state="${EXPECTED_SERVICE_STATE_BACKUP:-active}"
            fi
            if [[ "${service_state}" = "${expected_state}" ]]; then
                log_wrapper "expected service state ${service_state}" "3"
                exit 0
            else
                log_wrapper "unexpected service state ${service_state}" "1"
                exit 1
            fi
        ;;
        "notify"|"NOTIFY")
            readonly state_message="${vrrp_type} ${vrrp_name} is ${vrrp_state}"
            master_is_master_active="${MASTER_IS_MASTER_ACTIVE:-none}"
            master_is_master_inactive="${MASTER_IS_MASTER_INACTIVE:-start}"
            master_is_master_failed="${MASTER_IS_MASTER_FAILED:-restart}"
            master_is_master_disabled="${MASTER_IS_MASTER_DISABLED:-enable}"
            master_is_master_masked="${MASTER_IS_MASTER_MASKED:-none}"
            backup_is_master_active="${BACKUP_IS_MASTER_ACTIVE:-none}"
            backup_is_master_inactive="${BACKUP_IS_MASTER_INACTIVE:-start}"
            backup_is_master_failed="${BACKUP_IS_MASTER_FAILED:-restart}"
            backup_is_master_disabled="${BACKUP_IS_MASTER_DISABLED:-enable}"
            backup_is_master_masked="${BACKUP_IS_MASTER_MASKED:-none}"
            master_is_backup_active="${MASTER_IS_BACKUP_ACTIVE:-none}"
            master_is_backup_inactive="${MASTER_IS_BACKUP_INACTIVE:-start}"
            master_is_backup_failed="${MASTER_IS_BACKUP_FAILED:-restart}"
            master_is_backup_disabled="${MASTER_IS_BACKUP_DISABLED:-enable}"
            master_is_backup_masked="${MASTER_IS_BACKUP_MASKED:-none}"
            backup_is_backup_active="${BACKUP_IS_BACKUP_ACTIVE:-none}"
            backup_is_backup_inactive="${BACKUP_IS_BACKUP_INACTIVE:-start}"
            backup_is_backup_failed="${BACKUP_IS_BACKUP_FAILED:-restart}"
            backup_is_backup_disabled="${BACKUP_IS_BACKUP_DISABLED:-enable}"
            backup_is_backup_masked="${BACKUP_IS_BACKUP_MASKED:-none}"
            case $vrrp_state in
                "MASTER"|"master")
                    if [[ "${is_master}" = "true" ]]; then
                        log_wrapper "${state_message}" "3"
                        case $service_state in
                            "active")
                                action_wrapper "${master_is_master_active}" ;;
                            "inactive")
                                action_wrapper "${master_is_master_inactive}" ;;
                            "failed")
                                action_wrapper "${master_is_master_failed}" ;;
                            "disabled")
                                action_wrapper "${master_is_master_disabled}" ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${master_is_master_masked}" ;;
                        esac
                    else
                        log_wrapper "${state_message}" "2"
                        case $service_state in
                            "active")
                                action_wrapper "${backup_is_master_active}" ;;
                            "inactive")
                                action_wrapper "${backup_is_master_inactive}" ;;
                            "failed")
                                action_wrapper "${backup_is_master_failed}" ;;
                            "disabled")
                                action_wrapper "${backup_is_master_disabled}" ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${backup_is_master_masked}" ;;
                        esac
                    fi
                ;;
                "BACKUP"|"backup")
                    if [[ "${is_master}" = "true" ]]; then
                        log_wrapper "${state_message}" "2"
                        case $service_state in
                            "active")
                                action_wrapper "${master_is_backup_active}" ;;
                            "inactive")
                                action_wrapper "${master_is_backup_inactive}" ;;
                            "failed")
                                action_wrapper "${master_is_backup_failed}" ;;
                            "disabled")
                                action_wrapper "${master_is_backup_disabled}" ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${master_is_backup_masked}" ;;
                        esac
                    else
                        log_wrapper "${state_message}" "3"
                        case $service_state in
                            "active")
                                action_wrapper "${backup_is_backup_active}" ;;
                            "inactive")
                                action_wrapper "${backup_is_backup_inactive}" ;;
                            "failed")
                                action_wrapper "${backup_is_backup_failed}" ;;
                            "disabled")
                                action_wrapper "${backup_is_backup_disabled}" ;;
                            "masked"|"masked-runtime")
                                action_wrapper "${backup_is_backup_masked}" ;;
                        esac
                    fi
                ;;
                "FAILED"|"failed") log_wrapper "${state_message}" "2" ;;
            esac
            exit 0
        ;;
    esac
else
    if ! type flock >/dev/null 2>&1; then
        log_wrapper "flock command not found" "1"
        exit 1
    fi
fi
